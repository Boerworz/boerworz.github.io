<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ndersson.me</title>
    <link>http://ndersson.me/post/</link>
    <description>Recent content in Posts on ndersson.me</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Mar 2016 20:45:46 +0100</lastBuildDate>
    <atom:link href="http://ndersson.me/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>[Go] Capturing the HTTP status code from http.ResponseWriter</title>
      <link>http://ndersson.me/post/capturing_status_code_in_net_http/</link>
      <pubDate>Thu, 03 Mar 2016 20:45:46 +0100</pubDate>
      
      <guid>http://ndersson.me/post/capturing_status_code_in_net_http/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve slowly but surely been learning &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; over the past few
months, and I recently began working on a web service in my spare time. Go comes
with a great builtin package for building web services, &lt;a href=&#34;https://golang.org/pkg/net/http&#34;&gt;net/http&lt;/a&gt;, and
in this post I&amp;rsquo;ll cover how to wrap the &lt;code&gt;http.ResponseWriter&lt;/code&gt; type to capture
the HTTP status code from the response. This is useful if you need to log the
status code after the response handler has completed. If you need to keep track
of any other part of the response, this approach can easily be extended.&lt;/p&gt;

&lt;h4 id=&#34;getting-started:c31aa0bbe3e38da39d9b563327c02345&#34;&gt;Getting started&lt;/h4&gt;

&lt;p&gt;To get things started, let&amp;rsquo;s put together a very basic web service that responds
with a &lt;code&gt;404 Not Found&lt;/code&gt; to all requests except requests for the root:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HandleFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handleRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handleRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NotFound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;Hello, World!&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After starting our service using &lt;code&gt;go run main.go&lt;/code&gt;, navigating to
&lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; should present us with &lt;code&gt;&amp;quot;Hello, World!&amp;quot;&lt;/code&gt;. If we navigate
to &lt;a href=&#34;http://localhost:8080/foo&#34;&gt;any&lt;/a&gt; &lt;a href=&#34;http://localhost:8080/bar&#34;&gt;other&lt;/a&gt;
&lt;a href=&#34;http://localhost:8080/baz&#34;&gt;path&lt;/a&gt;, we should get a 404.&lt;/p&gt;

&lt;p&gt;Before we continue, take a moment to appreciate how easy it was to write that.
We didn&amp;rsquo;t even have to install a &lt;code&gt;gem&lt;/code&gt; or a &lt;code&gt;pod&lt;/code&gt; or an &lt;code&gt;egg&lt;/code&gt;!&lt;/p&gt;

&lt;h4 id=&#34;adding-logging:c31aa0bbe3e38da39d9b563327c02345&#34;&gt;Adding logging&lt;/h4&gt;

&lt;p&gt;Now, to make things more interesting, we decide that we should log all requests.
Our first idea is to create a function that takes a &lt;code&gt;http.Handler&lt;/code&gt; and wraps it,
returning a new handler that logs some information about the request before
invoking the wrapped handler:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wrapHandlerWithLogging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wrappedHandler&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Handler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;--&amp;gt; %s %s&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;nx&#34;&gt;wrapperHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;rootHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wrapHandlerWithLogging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handleRoot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;rootHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;:8080&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This works just as one would expect. If we make a few requests to our server,
we will see something along the following lines in our terminal:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run main.go
2016/03/02 21:44:42 --&amp;gt; GET /
2016/03/02 21:46:18 --&amp;gt; GET /foo
2016/03/02 21:46:20 --&amp;gt; GET /bar
2016/03/02 21:46:21 --&amp;gt; GET /baz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Pretty cool! However, it would be even cooler if we could log the response as
well. We figure we can just add another &lt;code&gt;log.Printf&lt;/code&gt; after the call to
&lt;code&gt;wrappedHandler.ServeHTTP&lt;/code&gt; to log the things we are interested in. An important
and informative part of the response is the HTTP status code, so we look through
the documentation for &lt;a href=&#34;https://golang.org/pkg/net/http/#ResponseWriter&#34;&gt;http.ResponseWriter&lt;/a&gt; to find out how to
retrieve the status code. But wait… we quickly realize that &lt;code&gt;http.ResponseWriter&lt;/code&gt;
doesn&amp;rsquo;t expose the status code! Will this be where our adventure with &lt;code&gt;net.http&lt;/code&gt;
ends?&lt;/p&gt;

&lt;p&gt;Of course not! After a closer look, we see that &lt;code&gt;ResponseWriter.WriteHeader&lt;/code&gt;
takes the status code as an argument. If we could somehow intercept that method,
then we could store the status code and use it for logging later.
This is in fact possible, and quite easy to do at that. By creating a new struct
that &lt;a href=&#34;https://golang.org/doc/effective_go.html#embedding&#34;&gt;embeds&lt;/a&gt; an &lt;code&gt;http.ResponseWriter&lt;/code&gt; we can implement the
&lt;code&gt;WriteHeader&lt;/code&gt; method to store the status code in our new struct:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;loggingResponseWriter&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NewLoggingResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;loggingResponseWriter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;loggingResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StatusOK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lrw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;loggingResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WriteHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;lrw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;code&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;lrw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WriteHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;When we have our new &lt;code&gt;loggingResponseWriter&lt;/code&gt; type, we simply need to make sure
that our wrapped handler is passed a &lt;code&gt;loggingResponseWriter&lt;/code&gt; instead of the
standard &lt;code&gt;http.ResponseWriter&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;wrapHandlerWithLogging&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;wrappedHandler&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Handler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;--&amp;gt; %s %s&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Method&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;URL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;nx&#34;&gt;lrw&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NewLoggingResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;wrappedHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;lrw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;lrw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;&amp;lt;-- %d %s&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;StatusText&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If we run our service again and make some requests we will see that the HTTP
status code from the response is now logged:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span&gt;&lt;/span&gt;$ go run main.go
2016/03/03 20:17:53 --&amp;gt; GET /
2016/03/03 20:17:53 &amp;lt;-- 200 OK
2016/03/03 20:17:56 --&amp;gt; GET /foo
2016/03/03 20:17:56 &amp;lt;-- 404 Not Found
2016/03/03 20:17:57 --&amp;gt; GET /bar
2016/03/03 20:17:57 &amp;lt;-- 404 Not Found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Just what we wanted!&lt;/p&gt;

&lt;h4 id=&#34;summary:c31aa0bbe3e38da39d9b563327c02345&#34;&gt;Summary&lt;/h4&gt;

&lt;p&gt;When I began working on this problem I was afraid that the code required to
solve the problem would be complex and difficult to understand. However, it
turns out that capturing the HTTP status code (or any other data, for that
matter) from the response is quite simple and easy to reason about.&lt;/p&gt;

&lt;p&gt;The approach discussed in this post gives a brief glimpse into how powerful
wrapping an &lt;code&gt;http.Handler&lt;/code&gt; can be by making it easy to add functionality on top
of existing handlers.
Extending this approach to things like authorization is a natural next step, and
combining it with &lt;a href=&#34;https://godoc.org/golang.org/x/net/context&#34;&gt;x/net/context&lt;/a&gt;
makes it even more powerful.&lt;/p&gt;

&lt;p&gt;If you want to try out the code with minimal effort I&amp;rsquo;ve created &lt;a href=&#34;https://gist.github.com/Boerworz/b683e46ae0761056a636&#34;&gt;a gist&lt;/a&gt;
with the entirety of the code outlined in this post. It also includes some
small comments about minor details that might not be entirely obvious from the
post.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>That time of the year</title>
      <link>http://ndersson.me/post/that_time_of_the_year/</link>
      <pubDate>Mon, 04 Jan 2016 17:52:29 +0100</pubDate>
      
      <guid>http://ndersson.me/post/that_time_of_the_year/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s that time of the year. The &lt;em&gt;I-should-create-a-blog&lt;/em&gt; time of the year.&lt;/p&gt;

&lt;p&gt;Nearly two years ago, at the beginning of 2014, I figured it was time to get
into the blogging game. I did some research on what the most popular static site
generator was and ended up with &lt;a href=&#34;//jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;. I found a theme
I liked and spent some time tweaking it. I wrote my first blog post, about
&lt;a href=&#34;//cycript.org&#34;&gt;Cycript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that was it. I left the blog to gather dust on my machine, never seeing
the light of &lt;del&gt;day&lt;/del&gt; the internet.&lt;/p&gt;

&lt;p&gt;In january of 2015, I wrote a second blog post - this time about an iOS debugging
tip. I now had &lt;em&gt;two&lt;/em&gt; posts, surely this was the time to publish the blog!&lt;/p&gt;

&lt;p&gt;Nope. Never happened.&lt;/p&gt;

&lt;p&gt;Which brings us to this post. As I said, it&amp;rsquo;s that time of the year again. I tried
to get my old blog running (or rather &lt;em&gt;generated&lt;/em&gt;) again, but I was met with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ jekyll serve
Configuration file: /Users/timandersson/Development/Web/Jekyll/personal_blog/_config.yml
            Source: /Users/timandersson/Development/Web/Jekyll/personal_blog
       Destination: /Users/timandersson/Development/Web/Jekyll/personal_blog/_site
      Generating... 
                    done.
I, [2016-01-04T21:59:42.024583 #78054]  INFO -- : Celluloid 0.17.2 is running in BACKPORTED mode. [ http://git.io/vJf3J ]
jekyll 2.5.3 | Error:  wrong number of arguments (2 for 1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I spent some time wrestling with different incantations of &lt;code&gt;rvm&lt;/code&gt; and &lt;code&gt;gem&lt;/code&gt; but
quickly grew tired of trying to get it to work. I was close to giving up on my
dream of becoming a blogger. Then, a couple of days ago, I stumbled across
&lt;a href=&#34;//gohugo.io&#34;&gt;Hugo&lt;/a&gt;. It was easy to &lt;a href=&#34;//gohugo.io/tutorials/installing-on-mac/&#34;&gt;setup&lt;/a&gt;
and I quickly found a &lt;a href=&#34;//themes.gohugo.io/hikari/&#34;&gt;theme&lt;/a&gt; I liked using their
&lt;a href=&#34;//themes.gohugo.io&#34;&gt;theme showcase&lt;/a&gt;. It even led to me creating my very first
&lt;a href=&#34;https://github.com/digitalcraftsman/hugo-hikari-theme/pull/4&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I ported my two blog posts from the Jekyll format to the format used by Hugo
and started writing this post. Will I ever get around to publishing the blog?&lt;/p&gt;

&lt;p&gt;I hope so.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Printing the View Controller Hierarchy on iOS</title>
      <link>http://ndersson.me/post/print_view_controller_hierarchy/</link>
      <pubDate>Thu, 01 Jan 2015 19:21:05 +0100</pubDate>
      
      <guid>http://ndersson.me/post/print_view_controller_hierarchy/</guid>
      <description>&lt;p&gt;A few days ago I stumbled across an excellent article on &lt;a href=&#34;http://www.objc.io&#34;&gt;obj.io&lt;/a&gt; about
debugging, titled &lt;a href=&#34;http://www.objc.io/issue-19/debugging-case-study.html&#34;&gt;Debugging: A Case Study&lt;/a&gt;. The article walks us through
the workflow of fixing a bug that turned out to be an issue in UIKit, and contains
a number of useful debugging tricks. There was one trick that I did not previously
know about, and which turned out to be immediately useful - printing the view
controller hierarchy.&lt;/p&gt;

&lt;p&gt;Similar to how it&amp;rsquo;s possible to print the &lt;em&gt;view&lt;/em&gt; hierarchy using the private
method &lt;code&gt;-[UIView recursiveDescription]&lt;/code&gt;, on iOS 8+ it&amp;rsquo;s also possible to print the
&lt;em&gt;view controller&lt;/em&gt; hierarchy using another private method: &lt;code&gt;-[UIViewController _printHierarchy]&lt;/code&gt;.
By calling this method on a window&amp;rsquo;s root view controller, we can see the entire
view controller hierarchy for a window. This is especially useful in the debugger:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;(lldb) po [[[UIWindow keyWindow] rootViewController] _printHierarchy]
&amp;lt;UINavigationController 0x7fe295815c00&amp;gt;, state: appeared, view: &amp;lt;UILayoutContainerView 0x7fe29411a860&amp;gt;
   | &amp;lt;TPAInitialViewController 0x7fe294118150&amp;gt;, state: appeared, view: &amp;lt;UIView 0x7fe29411fc90&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have any cool and/or useful debugging tricks of your own, let me know on &lt;a href=&#34;http://twitter.com/boerworz&#34;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cycript and NetNewsWire</title>
      <link>http://ndersson.me/post/cycript_and_netnewswire/</link>
      <pubDate>Fri, 28 Feb 2014 15:53:32 +0100</pubDate>
      
      <guid>http://ndersson.me/post/cycript_and_netnewswire/</guid>
      <description>&lt;p&gt;Yesterday, I gave &lt;a href=&#34;http://www.cycript.org&#34;&gt;Cycript&lt;/a&gt; a shot. I&amp;rsquo;ve stumbled across it several times in the past, but
never given it a try. I&amp;rsquo;m glad I finally did, because it is very cool!&lt;/p&gt;

&lt;p&gt;Cycript is an interactive console that lets you modify running applications on either iOS or OS X using a weird hybrid of JavaScript and Objective-C++ syntax. It lets you call arbitrary methods on objects, find instances of a certain class (through &lt;a href=&#34;http://www.cycript.org/manual/#7061c058-5485-4c00-be7e-b67accc55796&#34;&gt;magic&lt;/a&gt;), and offers tab-completion and syntax highlighting for all of this. I suggest you head over to the &lt;a href=&#34;http://www.cycript.org&#34;&gt;site&lt;/a&gt; to read more about it and to install it!&lt;/p&gt;

&lt;p&gt;Anyhow, after playing with it for a while, I put together a (&lt;em&gt;very&lt;/em&gt;) small script that removes the ads from NetNewsWire:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var adView = choose(NNWAdView)[0];
if(adView != null) {
    [adView.superview removeFromSuperview];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: Please don&amp;rsquo;t use this script instead of purchasing NNW.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To use it, simply launch NetNewsWire and run the script with &lt;code&gt;cycript -p NetNewsWire remove_ads.cy&lt;/code&gt; (assuming you&amp;rsquo;ve saved
the script to a file named &lt;code&gt;remove_ads.cy&lt;/code&gt;). Observe that since Cycript injected the script into the running NetNewsWire process, the changes are lost as soon as NetNewsWire is restarted.&lt;/p&gt;

&lt;p&gt;Even though this is a very simple script, it gives a tiny glimpse into how powerful and easy-to-use Cycript is. I&amp;rsquo;m just getting started, and plan to
try it out on my iPod Touch next. Perhaps this is the first step on a road to writing my first iOS tweak.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>